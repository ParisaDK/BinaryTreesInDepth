/*
Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> inOrderMap;

    int preorderIndex;

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        preorderIndex = 0;

        for(int i = 0; i<inorder.size(); i++){
            inOrderMap[inorder[i]] = i;
        }
       return arrayToTree(preorder, 0, preorder.size() - 1);
    }
private:
    TreeNode* arrayToTree(vector<int> preorder, int left, int right){
        if(left>right) return nullptr;
        
        int rootValue = preorder[preorderIndex];

        preorderIndex++;

        TreeNode* root = new TreeNode(rootValue);

        root->left = arrayToTree(preorder, left, inOrderMap[rootValue] - 1);
        root->right = arrayToTree(preorder, inOrderMap[rootValue] + 1, right);
        return root;
    }
};
