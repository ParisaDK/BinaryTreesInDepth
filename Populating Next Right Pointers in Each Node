/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
    if(!root) return root;
    
    if(root->left) root->left->next = root->right;
    if(root->right && root->next) root->right->next = root->next->left;
    
    connect(root->left);
    connect(root->right);
    return root;
    }
};

//Alternative solution 
    Node* connect(Node* root) {
        if(!root) return root;
        queue<Node*> current_level;
        current_level.push(root);

        while(!current_level.empty()){
            int size = current_level.size();
            for(int i = 0; i< size; i++){
                Node *node = current_level.front();
                current_level.pop();
                if(i < size - 1) node->next = current_level.front();
                if(node->left) current_level.push(node->left);
                if(node->right) current_level.push(node->right);
            }
    
        }   
        return root;
    }
