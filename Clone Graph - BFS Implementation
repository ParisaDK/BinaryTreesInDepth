/**
*Given a reference of a node in a connected undirected graph.

*Return a deep copy (clone) of the graph.

*Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

*class Node {
*    public int val;
*    public List<Node> neighbors;
*}
**/

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
private:
    unordered_map<Node*, Node*> visited; 
  
public:
    Node* cloneGraph(Node* node) {
        if(!node) return node;
        if(visited.find(node) != visited.end()){
            return visited[node];
        }
     
        Node* cloneNode = new Node(node->val);
        visited[node] = cloneNode;
    
        
        for(int i =0 ; i < node->neighbors.size(); i++){
            Node* neighbor = node->neighbors[i]; 
            cloneNode->neighbors.push_back(cloneGraph(neighbor));

        }
        return cloneNode;
        
    }
};
