/**
 * Problem: Given an m x n 2D binary grid which represents a map of '1's (land) and '0's (water),
 * return the number of islands. An island is surrounded by water and is formed by connecting
 * adjacent lands horizontally or vertically. You may assume all four edges of the grid are all
 * surrounded by water.
 *
 * This solution includes two implementations of DFS to solve the problem:
 * 1. Recursive DFS
 * 2. Iterative DFS using a stack
 */

class Solution {
private:

    void dfs(vector<vector<char>>& grid, int r, int c){
        int nr = grid.size(); //number of rows
        int nc = grid[0].size(); // number of columns
        grid[r][c] = '0';

        if(r - 1 >= 0 && grid[r-1][c] == '1') dfs(grid, r-1,c);
        if(r + 1 < nr && grid[r+1][c] == '1') dfs(grid, r+1, c);
        if(c - 1 >= 0 && grid[r][c-1] == '1') dfs(grid, r, c-1);
        if(c + 1 < nc && grid[r][c+1] == '1') dfs(grid, r,c+1);
    }

public:

    int numIslands(vector<vector<char>>& grid) {
        int nr = grid.size();
        if(!nr) return 0;
        int nc = grid[0].size();
        int num_islands = 0;
        
        for(int r = 0; r<nr ; r++){
            for(int c = 0; c <nc; c++){
                if(grid[r][c] == '1'){
                    ++num_islands;
                    dfs(grid, r, c);
                }
            }
        }
        return num_islands;
    }
};

\\ the stack implementaion is:
private:

    void dfs(vector<vector<char>>& grid, int r, int c){
        int nr = grid.size(); //number of rows
        int nc = grid[0].size(); // number of columns
        
        stack<pair<int, int>> stack_dfs;
        
        stack_dfs.push({r, c});

        while(!stack_dfs.empty()){
            
            auto rc = stack_dfs.top();
            stack_dfs.pop();
            
            int row = rc.first, col = rc.second;
            
            if(row < 0 || col < 0|| row >= nr || col >= nc || grid[row][col] == '0'){
                continue;
            }
            
            grid[row][col] = '0';


            if(row - 1 >= 0 && grid[row-1][col] == '1') stack_dfs.push({row-1,col});
            if(row + 1 < nr && grid[row+1][col] == '1') stack_dfs.push({row+1, col});
            if(col - 1 >= 0 && grid[row][col-1] == '1') stack_dfs.push({row, col-1});
            if(col + 1 < nc && grid[row][col+1] == '1') stack_dfs.push({row,col+1});
        }
    }

 
