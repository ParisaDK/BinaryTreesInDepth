#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if (!root) return result;

        queue<TreeNode*> current_level;
        current_level.push(root);

        while (!current_level.empty()) {
            vector<int> level_vector;
            queue<TreeNode*> next_level;

            while (!current_level.empty()) {
                TreeNode *node = current_level.front();
                current_level.pop();

                if (node->left) next_level.push(node->left);
                if (node->right) next_level.push(node->right);

                level_vector.push_back(node->val);
            }
            result.push_back(level_vector);
            current_level = next_level;
        }
        return result;
    }
};

int main() {
    // Create an example tree: 
    //      3
    //     / \
    //    9  20
    //      /  \
    //     15   7
    TreeNode *root = new TreeNode(3);
    root->left = new TreeNode(9);
    root->right = new TreeNode(20, new TreeNode(15), new TreeNode(7));

    Solution solution;
    vector<vector<int>> result = solution.levelOrder(root);

    // Print
    for (const auto& level : result) {
        for (int val : level) {
            cout << val << " ";
        }
        cout << endl;
    }

    // Cleanning up
    delete root->right->left;
    delete root->right->right;
    delete root->left;
    delete root->right;
    delete root;

    return 0;
}
